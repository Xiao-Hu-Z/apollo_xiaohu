class HardVFE(Module):
  __parameters__ = []
  training : bool
  scatter : __torch__.mmdet3d.ops.voxel.scatter_points.DynamicScatter
  vfe_layers : __torch__.torch.nn.modules.container.ModuleList
  def forward(self: __torch__.mmdet3d.models.voxel_encoders.voxel_encoder.HardVFE,
    features: Tensor,
    num_points: Tensor,
    coors: Tensor) -> Tensor:
    _0 = getattr(self.vfe_layers, "0")
    _1 = torch.slice(features, 0, 0, 9223372036854775807, 1)
    _2 = torch.slice(_1, 1, 0, 9223372036854775807, 1)
    _3 = torch.sum(torch.slice(_2, 2, 0, 3, 1), [1], True, dtype=None)
    num_points0 = torch.type_as(num_points, features)
    points_mean = torch.div(_3, torch.view(num_points0, [-1, 1, 1]))
    _4 = torch.slice(features, 0, 0, 9223372036854775807, 1)
    _5 = torch.slice(_4, 1, 0, 9223372036854775807, 1)
    f_cluster = torch.sub(torch.slice(_5, 2, 0, 3, 1), points_mean, alpha=1)
    _6 = ops.prim.NumToTensor(torch.size(features, 0))
    _7 = ops.prim.NumToTensor(torch.size(features, 1))
    f_center = torch.new_zeros(features, [int(_6), int(_7), 3], dtype=6, layout=0, device=torch.device("cuda:0"), pin_memory=False)
    _8 = torch.slice(features, 0, 0, 9223372036854775807, 1)
    _9 = torch.slice(_8, 1, 0, 9223372036854775807, 1)
    _10 = torch.slice(coors, 0, 0, 9223372036854775807, 1)
    _11 = torch.type_as(torch.select(_10, 1, 3), features)
    _12 = torch.mul(torch.unsqueeze(_11, 1), CONSTANTS.c0)
    _13 = torch.select(_9, 2, 0)
    _14 = torch.add(_12, CONSTANTS.c1, alpha=1)
    _15 = torch.sub(_13, _14, alpha=1)
    _16 = torch.slice(f_center, 0, 0, 9223372036854775807, 1)
    _17 = torch.slice(_16, 1, 0, 9223372036854775807, 1)
    _18 = torch.copy_(torch.select(_17, 2, 0), torch.view(_15, [32000, 20]), False)
    _19 = torch.slice(features, 0, 0, 9223372036854775807, 1)
    _20 = torch.slice(_19, 1, 0, 9223372036854775807, 1)
    _21 = torch.slice(coors, 0, 0, 9223372036854775807, 1)
    _22 = torch.type_as(torch.select(_21, 1, 2), features)
    _23 = torch.mul(torch.unsqueeze(_22, 1), CONSTANTS.c0)
    _24 = torch.select(_20, 2, 1)
    _25 = torch.add(_23, CONSTANTS.c1, alpha=1)
    _26 = torch.sub(_24, _25, alpha=1)
    _27 = torch.slice(f_center, 0, 0, 9223372036854775807, 1)
    _28 = torch.slice(_27, 1, 0, 9223372036854775807, 1)
    _29 = torch.copy_(torch.select(_28, 2, 1), torch.view(_26, [32000, 20]), False)
    _30 = torch.slice(features, 0, 0, 9223372036854775807, 1)
    _31 = torch.slice(_30, 1, 0, 9223372036854775807, 1)
    _32 = torch.slice(coors, 0, 0, 9223372036854775807, 1)
    _33 = torch.type_as(torch.select(_32, 1, 1), features)
    _34 = torch.mul(torch.unsqueeze(_33, 1), CONSTANTS.c2)
    _35 = torch.select(_31, 2, 2)
    _36 = torch.add(_34, CONSTANTS.c3, alpha=1)
    _37 = torch.sub(_35, _36, alpha=1)
    _38 = torch.slice(f_center, 0, 0, 9223372036854775807, 1)
    _39 = torch.slice(_38, 1, 0, 9223372036854775807, 1)
    _40 = torch.copy_(torch.select(_39, 2, 2), torch.view(_37, [32000, 20]), False)
    voxel_feats = torch.cat([features, f_cluster, f_center], -1)
    max_num = ops.prim.NumToTensor(torch.size(voxel_feats, 1))
    _41 = annotate(number, max_num)
    actual_num = torch.unsqueeze(num_points0, 1)
    _42 = torch.arange(_41, dtype=3, layout=0, device=torch.device("cuda:0"), pin_memory=False)
    _43 = torch.view(_42, [1, -1])
    _44 = torch.to(actual_num, 3, False, False, None)
    mask = torch.gt(_44, _43)
    _45 = torch.type_as(torch.unsqueeze(mask, -1), voxel_feats)
    inputs = torch.mul_(voxel_feats, _45)
    return (_0).forward(inputs, )
