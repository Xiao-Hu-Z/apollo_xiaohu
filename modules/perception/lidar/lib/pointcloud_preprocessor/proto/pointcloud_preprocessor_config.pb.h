// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pointcloud_preprocessor_config.proto

#ifndef PROTOBUF_pointcloud_5fpreprocessor_5fconfig_2eproto__INCLUDED
#define PROTOBUF_pointcloud_5fpreprocessor_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace lidar {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_pointcloud_5fpreprocessor_5fconfig_2eproto();
void protobuf_AssignDesc_pointcloud_5fpreprocessor_5fconfig_2eproto();
void protobuf_ShutdownFile_pointcloud_5fpreprocessor_5fconfig_2eproto();

class PointCloudPreprocessorConfig;

// ===================================================================

class PointCloudPreprocessorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.PointCloudPreprocessorConfig) */ {
 public:
  PointCloudPreprocessorConfig();
  virtual ~PointCloudPreprocessorConfig();

  PointCloudPreprocessorConfig(const PointCloudPreprocessorConfig& from);

  inline PointCloudPreprocessorConfig& operator=(const PointCloudPreprocessorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloudPreprocessorConfig& default_instance();

  void Swap(PointCloudPreprocessorConfig* other);

  // implements Message ----------------------------------------------

  inline PointCloudPreprocessorConfig* New() const { return New(NULL); }

  PointCloudPreprocessorConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloudPreprocessorConfig& from);
  void MergeFrom(const PointCloudPreprocessorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointCloudPreprocessorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool filter_naninf_points = 1 [default = true];
  bool has_filter_naninf_points() const;
  void clear_filter_naninf_points();
  static const int kFilterNaninfPointsFieldNumber = 1;
  bool filter_naninf_points() const;
  void set_filter_naninf_points(bool value);

  // optional bool filter_nearby_box_points = 2 [default = false];
  bool has_filter_nearby_box_points() const;
  void clear_filter_nearby_box_points();
  static const int kFilterNearbyBoxPointsFieldNumber = 2;
  bool filter_nearby_box_points() const;
  void set_filter_nearby_box_points(bool value);

  // optional float box_forward_x = 3 [default = 0];
  bool has_box_forward_x() const;
  void clear_box_forward_x();
  static const int kBoxForwardXFieldNumber = 3;
  float box_forward_x() const;
  void set_box_forward_x(float value);

  // optional float box_backward_x = 4 [default = 0];
  bool has_box_backward_x() const;
  void clear_box_backward_x();
  static const int kBoxBackwardXFieldNumber = 4;
  float box_backward_x() const;
  void set_box_backward_x(float value);

  // optional float box_forward_y = 5 [default = 0];
  bool has_box_forward_y() const;
  void clear_box_forward_y();
  static const int kBoxForwardYFieldNumber = 5;
  float box_forward_y() const;
  void set_box_forward_y(float value);

  // optional float box_backward_y = 6 [default = 0];
  bool has_box_backward_y() const;
  void clear_box_backward_y();
  static const int kBoxBackwardYFieldNumber = 6;
  float box_backward_y() const;
  void set_box_backward_y(float value);

  // optional bool filter_high_z_points = 7 [default = false];
  bool has_filter_high_z_points() const;
  void clear_filter_high_z_points();
  static const int kFilterHighZPointsFieldNumber = 7;
  bool filter_high_z_points() const;
  void set_filter_high_z_points(bool value);

  // optional float z_threshold = 8 [default = 5];
  bool has_z_threshold() const;
  void clear_z_threshold();
  static const int kZThresholdFieldNumber = 8;
  float z_threshold() const;
  void set_z_threshold(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.PointCloudPreprocessorConfig)
 private:
  inline void set_has_filter_naninf_points();
  inline void clear_has_filter_naninf_points();
  inline void set_has_filter_nearby_box_points();
  inline void clear_has_filter_nearby_box_points();
  inline void set_has_box_forward_x();
  inline void clear_has_box_forward_x();
  inline void set_has_box_backward_x();
  inline void clear_has_box_backward_x();
  inline void set_has_box_forward_y();
  inline void clear_has_box_forward_y();
  inline void set_has_box_backward_y();
  inline void clear_has_box_backward_y();
  inline void set_has_filter_high_z_points();
  inline void clear_has_filter_high_z_points();
  inline void set_has_z_threshold();
  inline void clear_has_z_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float box_forward_x_;
  bool filter_naninf_points_;
  bool filter_nearby_box_points_;
  bool filter_high_z_points_;
  float box_backward_x_;
  float box_forward_y_;
  float box_backward_y_;
  float z_threshold_;
  friend void  protobuf_AddDesc_pointcloud_5fpreprocessor_5fconfig_2eproto();
  friend void protobuf_AssignDesc_pointcloud_5fpreprocessor_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_pointcloud_5fpreprocessor_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PointCloudPreprocessorConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloudPreprocessorConfig

// optional bool filter_naninf_points = 1 [default = true];
inline bool PointCloudPreprocessorConfig::has_filter_naninf_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_filter_naninf_points() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointCloudPreprocessorConfig::clear_has_filter_naninf_points() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointCloudPreprocessorConfig::clear_filter_naninf_points() {
  filter_naninf_points_ = true;
  clear_has_filter_naninf_points();
}
inline bool PointCloudPreprocessorConfig::filter_naninf_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_naninf_points)
  return filter_naninf_points_;
}
inline void PointCloudPreprocessorConfig::set_filter_naninf_points(bool value) {
  set_has_filter_naninf_points();
  filter_naninf_points_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_naninf_points)
}

// optional bool filter_nearby_box_points = 2 [default = false];
inline bool PointCloudPreprocessorConfig::has_filter_nearby_box_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_filter_nearby_box_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointCloudPreprocessorConfig::clear_has_filter_nearby_box_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointCloudPreprocessorConfig::clear_filter_nearby_box_points() {
  filter_nearby_box_points_ = false;
  clear_has_filter_nearby_box_points();
}
inline bool PointCloudPreprocessorConfig::filter_nearby_box_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_nearby_box_points)
  return filter_nearby_box_points_;
}
inline void PointCloudPreprocessorConfig::set_filter_nearby_box_points(bool value) {
  set_has_filter_nearby_box_points();
  filter_nearby_box_points_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_nearby_box_points)
}

// optional float box_forward_x = 3 [default = 0];
inline bool PointCloudPreprocessorConfig::has_box_forward_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_box_forward_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointCloudPreprocessorConfig::clear_has_box_forward_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointCloudPreprocessorConfig::clear_box_forward_x() {
  box_forward_x_ = 0;
  clear_has_box_forward_x();
}
inline float PointCloudPreprocessorConfig::box_forward_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_x)
  return box_forward_x_;
}
inline void PointCloudPreprocessorConfig::set_box_forward_x(float value) {
  set_has_box_forward_x();
  box_forward_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_x)
}

// optional float box_backward_x = 4 [default = 0];
inline bool PointCloudPreprocessorConfig::has_box_backward_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_box_backward_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointCloudPreprocessorConfig::clear_has_box_backward_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointCloudPreprocessorConfig::clear_box_backward_x() {
  box_backward_x_ = 0;
  clear_has_box_backward_x();
}
inline float PointCloudPreprocessorConfig::box_backward_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_x)
  return box_backward_x_;
}
inline void PointCloudPreprocessorConfig::set_box_backward_x(float value) {
  set_has_box_backward_x();
  box_backward_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_x)
}

// optional float box_forward_y = 5 [default = 0];
inline bool PointCloudPreprocessorConfig::has_box_forward_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_box_forward_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PointCloudPreprocessorConfig::clear_has_box_forward_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PointCloudPreprocessorConfig::clear_box_forward_y() {
  box_forward_y_ = 0;
  clear_has_box_forward_y();
}
inline float PointCloudPreprocessorConfig::box_forward_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_y)
  return box_forward_y_;
}
inline void PointCloudPreprocessorConfig::set_box_forward_y(float value) {
  set_has_box_forward_y();
  box_forward_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_forward_y)
}

// optional float box_backward_y = 6 [default = 0];
inline bool PointCloudPreprocessorConfig::has_box_backward_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_box_backward_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PointCloudPreprocessorConfig::clear_has_box_backward_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PointCloudPreprocessorConfig::clear_box_backward_y() {
  box_backward_y_ = 0;
  clear_has_box_backward_y();
}
inline float PointCloudPreprocessorConfig::box_backward_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_y)
  return box_backward_y_;
}
inline void PointCloudPreprocessorConfig::set_box_backward_y(float value) {
  set_has_box_backward_y();
  box_backward_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.box_backward_y)
}

// optional bool filter_high_z_points = 7 [default = false];
inline bool PointCloudPreprocessorConfig::has_filter_high_z_points() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_filter_high_z_points() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PointCloudPreprocessorConfig::clear_has_filter_high_z_points() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PointCloudPreprocessorConfig::clear_filter_high_z_points() {
  filter_high_z_points_ = false;
  clear_has_filter_high_z_points();
}
inline bool PointCloudPreprocessorConfig::filter_high_z_points() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_high_z_points)
  return filter_high_z_points_;
}
inline void PointCloudPreprocessorConfig::set_filter_high_z_points(bool value) {
  set_has_filter_high_z_points();
  filter_high_z_points_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.filter_high_z_points)
}

// optional float z_threshold = 8 [default = 5];
inline bool PointCloudPreprocessorConfig::has_z_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PointCloudPreprocessorConfig::set_has_z_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PointCloudPreprocessorConfig::clear_has_z_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PointCloudPreprocessorConfig::clear_z_threshold() {
  z_threshold_ = 5;
  clear_has_z_threshold();
}
inline float PointCloudPreprocessorConfig::z_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.PointCloudPreprocessorConfig.z_threshold)
  return z_threshold_;
}
inline void PointCloudPreprocessorConfig::set_z_threshold(float value) {
  set_has_z_threshold();
  z_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.PointCloudPreprocessorConfig.z_threshold)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pointcloud_5fpreprocessor_5fconfig_2eproto__INCLUDED
